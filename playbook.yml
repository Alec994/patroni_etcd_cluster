---
- name: "Generating SSL Certificates For Remote Hosts"
  tags:
    - certgen
  gather_facts: false
  hosts: localhost
  connection: local
  vars:
    ssl_dir: "{{ playbook_dir }}/ssl"

  tasks:
    - name: "Create SSL Directory Structure"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ ssl_dir }}"
        - "{{ ssl_dir }}/etcd"
        - "{{ ssl_dir }}/patroni"

    - name: "Generate CA Private Key"
      community.crypto.openssl_privatekey:
        path: "{{ ssl_dir }}/HAClusterCA.pem"

    - name: "Generate CA Certificate Signing Request"
      community.crypto.openssl_csr:
        path: "{{ ssl_dir }}/HAClusterCA.csr"
        privatekey_path: "{{ ssl_dir }}/HAClusterCA.pem"
        country_name: RU
        state_or_province_name: Republic of Tatarstan
        locality_name: Kazan
        organization_name: Innostage Group
        organizational_unit_name: IT Department
        common_name: stand.hacluster.ru

    - name: "Generate CA X509 Certificate"
      community.crypto.x509_certificate:
        path: "{{ ssl_dir }}/HAClusterCA.crt"
        privatekey_path: "{{ ssl_dir }}/HAClusterCA.pem"
        csr_path: "{{ ssl_dir }}/HAClusterCA.csr"
        provider: selfsigned
 
    - name: "Generate Etcd Hosts Private Keys"
      community.crypto.openssl_privatekey:
        path: "{{ ssl_dir }}/etcd/{{ item }}.pem"
      loop: "{{ groups['etcd'] }}"

    - name: "Generate Etcd Hosts Certificate Signing Requests"
      community.crypto.openssl_csr:
        path: "{{ ssl_dir }}/etcd/{{ item }}.csr"
        privatekey_path: "{{ ssl_dir }}/etcd/{{ item }}.pem"
        country_name: RU
        state_or_province_name: Republic of Tatarstan
        locality_name: Kazan
        organization_name: Innostage Group
        organizational_unit_name: IT Department
        common_name: "{{ item }}"
        subject_alt_name: "DNS:{{ item }},IP:{{ hostvars[item]['ansible_host'] }}"
      loop: "{{ groups['etcd'] }}"
 
    - name: "Generate Etcd Hosts X509 Certificates"
      community.crypto.x509_certificate:
        path: "{{ ssl_dir }}/etcd/{{ item }}.crt"
        privatekey_path: "{{ ssl_dir }}/etcd/{{ item }}.pem"
        csr_path: "{{ ssl_dir }}/etcd/{{ item }}.csr"
        ownca_path: "{{ ssl_dir }}/HAClusterCA.crt"
        ownca_privatekey_path: "{{ ssl_dir }}/HAClusterCA.pem"
        provider: ownca
      loop: "{{ groups['etcd'] }}"

    - name: "Generate Patroni Hosts Private Keys"
      community.crypto.openssl_privatekey:
        path: "{{ ssl_dir }}/patroni/{{ item }}.pem"
      loop: "{{ groups['patroni'] }}"

    - name: "Generate Patroni Hosts Certificate Signing Requests"
      community.crypto.openssl_csr:
        path: "{{ ssl_dir }}/patroni/{{ item }}.csr"
        privatekey_path: "{{ ssl_dir }}/patroni/{{ item }}.pem"
        country_name: RU
        state_or_province_name: Republic of Tatarstan
        locality_name: Kazan
        organization_name: Innostage Group
        organizational_unit_name: IT Department
        common_name: "{{ item }}"
        subject_alt_name: "DNS:{{ item }},IP:{{ hostvars[item]['ansible_host'] }}"
      loop: "{{ groups['patroni'] }}"
 
    - name: "Generate Patroni Hosts X509 Certificates"
      community.crypto.x509_certificate:
        path: "{{ ssl_dir }}/patroni/{{ item }}.crt"
        privatekey_path: "{{ ssl_dir }}/patroni/{{ item }}.pem"
        csr_path: "{{ ssl_dir }}/patroni/{{ item }}.csr"
        ownca_path: "{{ ssl_dir }}/HAClusterCA.crt"
        ownca_privatekey_path: "{{ ssl_dir }}/HAClusterCA.pem"
        provider: ownca
      loop: "{{ groups['patroni'] }}"

- name: "Installing And Creating Etcd Cluster"
  hosts: etcd
  gather_facts: true
  vars:
    path_to_templates: /root/patroni_etcd_cluster/templates # Needs to be set absalute path to templates
 
  tasks:
    - name: "Debug Print OS Family"
      tags:
        - os_family_debug
      ansible.builtin.debug:
        msg: OS Family is {{ ansible_facts['os_family'] }}

    - name: "Updating Repositories If Distro Is RHEL-like"
      ansible.builtin.dnf:
        state: latest
        update_cache: true
      when: ansible_facts['os_family'] == "RedHat"

    - name: "Updating Repositories If Distro Is Debian-like"
      ansible.builtin.apt:
        state: latest
        update_cache: true
      when: ansible_facts['os_family'] == "Debian" or
            ansible_facts['os_family'] == "Astra Linux"

    - name: "Getting File Info"
      ansible.builtin.stat:
        path: /tmp/etcd-v3.5.21-linux-amd64.tar.gz
      register: file_info

    - name: "Getting Directory Info"
      tags:
        - create_etcd_dir
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - /etc/etcd
        - /var/lib/etcd
      register: directory_info

    - name: "Ensuring Etcd User Exists"
      tags:
        - create_etcd_dir
      ansible.builtin.user:
        name: etcd
        state: present

    - name: "Creating Etcd Data Directory"
      ansible.builtin.file:
        path: /var/lib/etcd
        state: directory
        owner: etcd
        group: etcd
        mode: '0755'

    - name: "Downloading Etcd Binary To The Directory /tmp"
      ansible.builtin.get_url:
        url: https://github.com/etcd-io/etcd/releases/download/v3.5.21/etcd-v3.5.21-linux-amd64.tar.gz
        dest: /tmp/
        mode: "0750"
      when: not file_info.stat.exists


    - name: "Extracting Etcd Files"
      ansible.builtin.unarchive:
        src: /tmp/etcd-v3.5.21-linux-amd64.tar.gz
        dest: "/tmp/"
        remote_src: true

    - name: "Copy Binary To /usr/local/bin"
      ansible.builtin.copy:
        src: /tmp/etcd-v3.5.21-linux-amd64/{{ item }}
        dest: /usr/local/bin
        owner: root
        group: root
        mode: "0755"
        remote_src: true
      loop:
        - etcd
        - etcdctl

    - name: "Creating Directory For Etcd"
      tags:
        - create_etcd_dir
      ansible.builtin.file:
        path: /etc/etcd
        owner: etcd
        group: etcd
        mode: "0755"
        state: directory

    - name: "Generating Etcd.yaml In Directory /etc/etcd"
      tags:
        - gen_etcd_yml
      ansible.builtin.template:
        src: '{{ path_to_templates }}/etcd.j2'
        dest: /etc/etcd/etcd.yaml
        owner: etcd
        group: etcd
        mode: "0644"
      vars:
        peer_urls_port: '2380'
        client_urls_port: '2379'
        http_protocol: 'http'
        
    - name: "Generating Systemd File For Etcd.service"
      ansible.builtin.template:
        src: '{{ path_to_templates }}/systemd_etcd.j2'
        dest: /usr/lib/systemd/system/etcd.service
        mode: "0644"
        owner: root
        group: root
    
    - name: "Daemon Reload"
      ansible.builtin.systemd:
        daemon_reload: true
  
    - name: "Starting Etcd Cluster"
      ansible.builtin.systemd:
        name: etcd.service
        state: restarted

- name: "Patroni Management"
  tags:
    - patroni_setup
  hosts: patroni
  vars:
    path_to_templates: /root/patroni_etcd_cluster/templates # Needs to be set absalute path to templates
  tasks:
    - name: "Installing Patroni On RHEL-like Distro"
      ansible.builtin.dnf:
        name:
          - patroni
          - python3-etcd
          - postgresql-server
        state: latest
      when: ansible_facts['os_family'] == "RedHat"

    - name: "Installing Patroni On Debian-like Distro"
      ansible.builtin.apt:
        name:
          - patroni
          - python3-etcd
          - postgresql
        state: latest
      when: ansible_facts['os_family'] == "Debian" or
            ansible_facts['os_family'] == "Astra Linux"

    - name: "Disabling Default PostgreSQL Service"
      ansible.builtin.systemd:
        name: postgresql
        enabled: false
        state: stopped
            
    - name: "Getting pg_ctl Directory"
      tags:
        - patroni_template
      ansible.builtin.command: "find / -name pg_ctl -printf '%h\\n'"
      register: pg_ctl
      changed_when: false
      ignore_errors: true
      failed_when: pg_ctl.rc != 1

    - name: "Printing pg_ctl"
      ansible.builtin.debug:
        msg: '{{ pg_ctl.stdout_lines }}'


    - name: "Creating Log Direcroty For Patroni"
      ansible.builtin.file:
        path: /var/log/patroni
        state: directory
        owner: postgres
        group: postgres
        mode: "0700"

    - name: "Create Database Directory And Giving Privileges"
      ansible.builtin.file:
        path: /data/pg_data
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'

    - name: "Creating pgsql Directory"
      ansible.builtin.file:
        path: /var/lib/pgsql
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'

    - name: "Checking For Patroni Jinja File"
      tags:
        - patroni_template
      ansible.builtin.template:
        src: '{{ path_to_templates }}/patroni_yaml.j2'
        dest: /etc/patroni/patroni.yml
        mode: "0744"
      vars:
        pg_data_dir: /data/pg_data
        pg_bin_files: '{{ pg_ctl.stdout_lines[0] }}'

    - name: "Patroni Service Setting"
      ansible.builtin.template:
        src: '{{ path_to_templates }}/patroni_service.j2'
        dest: '/etc/systemd/system/patroni.service'
        mode: '0644'
        owner: root
        group: root
 
    - name: "Daemon Reload"
      ansible.builtin.systemd:
        daemon_reload: true

    - name: "Starting Patroni Service"
      ansible.builtin.systemd:
        name: patroni.service
        state: restarted
        enabled: true

